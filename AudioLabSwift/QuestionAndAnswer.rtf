{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 1. If you made the FFT Magnitude Buffer a larger array, would your program still work properly? If yes, why? If not, what would you need to change?
\f1\b0 \
	\
	
\f2 \expnd0\expndtw0\kerning0
The program would still function well with a larger FFT Magnitude Buffer, but some changes would be required. The size of the FFT buffer has a direct impact on the frequency and temporal resolution of the audio analysis. In addition to providing greater frequency resolution, a larger FFT buffer would improve frequency detection accuracy. . However, this would mean that we would lose temporal resolution and hence rapid frequency changes would be difficult to track. Again, the increase of the FFT buffer size would demand the modification of the buffer's buffer to pull up (the bigger number of frequency bins (eg. detecting peaks in an expansion of a larger array). A very bulky buffer would certainly ask for more processing power, possibly encountering some performance issues. Meanwhile, the end-user should be the one who is more careful when working with the memory and optimizing the speed of the FFT process. So, as a result, even with the program still being functional because of the larger buffer, changes that are needed to be done because of the effect of performance and frequency resolution will be made.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \

\f0\b 2. Is pausing the audioManager object better than deallocating it when the view has disappeared(explain your reasoning)?
\f1\b0 \
\
\pard\pardeftab720\partightenfactor0
\cf0 	
\f2 \expnd0\expndtw0\kerning0
When the view fades away, it is wiser to pause the audioManager instead of deallocating it in general. Pausing allows you to freeze the audioManager without breaking the current state of the audio engine, so you do not have to reinitialize it the next time the view is displayed. This is especially true if the view comes back frequently, such as when users go back and forth in the app. By conserving the audio engine and the processes and settings in execution, it is possible to restart the app more quickly, and in turn, the user's overall experience is enhanced. On the flip side, unallocating the audioManager is going to release the memory and resources that will be helpful in case the view that is audio-related does not matter anymore. However, for the temporary view that is absent, the pause way is the one with the best result.}